version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm run build
            #exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm run build
            #exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-test]
      # Your job code here
      - run:
          name: frontend-test
          command:  |
            cd frontend
            npm install 
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test  

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-test]
      # Your job code here
      - run:
          name: backend-test
          command:  |
            cd backend
            npm install 
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test         
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [scan-frontend]
      # Your job code here
      - run:
          name: scan-frontend
          command:  |
            cd frontend
            npm install
            npm audit fix
            npm audit fix --force
            npm install jest@27.2.5 
            #npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: scan-frontend   

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [scan-backend]
      # Your job code here
      - run:
          name: scan-backend
          command:  |
            cd backend
            npm install
            #npm audit --audit-level=critical --force
            #cd backend
            #npm install
            #npm audit fix
            #npm audit fix --force
            #npm install jest@27.2.5
            #npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: scan-backend 
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar
          command: yum install -y tar gzip   
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=Udacity-Project3 \
              --stack-name "back-end-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              #exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=Udacity-Project3 \
              --stack-name "front-end-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              #exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            backendip=$(aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --filters "Name=tag:mark,Values=Udapeople-backend" \
              --output=text)
            echo $backendip >> .circleci/ansible/inventory.txt
            curl -H "Content-Type: text/plain" -H "token: 69511e31-ed89-4cd0-ba06-27a8f218a7ed" \
              --request PUT --data $backendip https://api.memstash.io/values/udapeoplebackendip
            #cat .circleci/ansible/inventory.txt
            # exit 1

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure  


  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
              - "01:66:e6:03:bb:e5:fd:cf:a8:36:86:55:89:bb:60:3e"
      # attach workspace
      - attach_workspace:
            at: ~/project
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Set up inventory file
          command: |
            cd .circleci/ansible
            URLS=$(curl -H "token: 69511e31-ed89-4cd0-ba06-27a8f218a7ed" --request GET https://api.memstash.io/values/udapeoplebackendip)
            echo "$URLS" >> inventory.txt
            cat inventory.txt
      - run:
          name: Configure server with ansible
          no_output_timeout: 30m
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
            cat inventory.txt
            #cat configure-server.yml




      # Here's where you will add some code to rollback on failure  

workflows:
  default:
    jobs:
#      - build-frontend
#      - build-backend
#      - test-frontend:
#          requires: [build-frontend]
#      - test-backend:
#          requires: [build-backend]
#      - scan-frontend:
#          requires: [build-frontend]
#      - scan-backend:
#          requires: [build-backend]
      - deploy-infrastructure
#      - deploy-infrastructure:
#          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#          filters:
#            branches:
#              only: [test-feature-branch]
#      - configure-infrastructure
      - configure-infrastructure:
          requires: [deploy-infrastructure]